#!/usr/bin/env bash

set -E

langdirs='after/ftdetect after/ftplugin after/indent after/syntax autoload compiler ftdetect ftplugin indent plugin syntax'
langdirs_basic='after/ftdetect after/indent after/syntax ftdetect indent syntax'

tmpfolder='./tmp'
backfolder='_oldpacks_backup'
gitsource='https://github.com'

function cleanup_and_exit() {
    # remove temp folder
    [[ -d "$tmpfolder" ]] \
        && rm -rf "$tmpfolder"
    printf '%s\n' "$1"
    exit "$2"
}

download() {
    for pack in $1; do
        path="$(cut -d ':' -f 2 <<< "$pack" | cut -d '#' -f 1)"
        dir="$tmpfolder/$(cut -d '/' -f 2 <<< "$path")"
        if [[ "$pack" =~ \# ]]; then
            branch="$(cut -d '#' -f 2 <<< "$pack")"
        else
            branch='master'
        fi
        rm -rf "$dir"
        while [[ ! -d "$dir" ]]; do
            git clone -b "$branch" -q --recursive "$gitsource/${path}.git" "$dir" \
                && printf '%s' '.'
        done
    done
    wait
}

extract() {
    printf '\n'
    for pack in $1; do
        name="$(cut -d ':' -f 1 <<< "$pack" | cut -d '#' -f 1)"
        path="$(cut -d ':' -f 2 <<< "$pack" | cut -d '#' -f 1)"
        dir="$tmpfolder/$(cut -d '/' -f 2 <<< "$path")"
        if grep -q '#' <<< "$pack"; then
            branch="$(cut -d '#' -f 2 <<< "$pack")"
        else
            branch='master'
        fi
        directories="langdirs$(cut -d ':' -f 3 <<< "$pack" | cut -d '#' -f 1)"
        printf -- "- [$name]($gitsource/${path}#branch=$branch) ("

        subdirs=''
        for subdir in ${!directories}; do
            if [ -d "$dir/$subdir" ]; then
                base="$(basename "$subdir")"
                [[ "$subdirs" != *"$base"* ]] \
                    && subdirs="$subdirs, $base"
                copy_dir "$dir" "$subdir"
            fi
        done

        printf '%s\n' "${subdirs##, })"
    done
}

copy_dir() {
    while read -r; do
        file_path="$(dirname "${REPLY##$1/}")"
        mkdir -p "$file_path"
        touch "$file_path/$(basename "$REPLY")"
        cat "$REPLY" >> "$file_path/$(basename "$REPLY")"
    done < <(find "$1/$2" -name '*.vim')
}

concat_ftdetect() {
    cat ftdetect/* | egrep '^[^"]' > "$tmpfolder/polyglot.vim"
    rm -f ftdetect/*
    mv "$tmpfolder/polyglot.vim" ftdetect/
}

backup() {
    backupdirs='after autoload compiler ftdetect ftplugin indent plugin syntax'

    [[ -d "$backfolder" ]] \
        && cleanup_and_exit "Error, backup directory already exists: $backfolder" 1
    install -d "$backfolder"
    printf '%s\n' "Backing up current packs to: $backfolder"
    for subdir in $backupdirs; do
        if [[ -d $subdir ]]; then
            mv "$subdir" "$backfolder/$subdir"
        else
            printf '%s\n' "Error, could not backup missing directory: $subdir"
        fi
    done
}

PACKS='
    archversion:prurigro/vim-archversion
    arduino:sudar/vim-arduino-syntax
    blade:xsbeats/vim-blade
    aspnet:vim-scripts/aspnet.vim--Abshire
    c++11:octol/vim-cpp-enhanced-highlight
    c/c++:vim-jp/cpp-vim
    c-extensions:kergoth/aftersyntaxc.vim
    clojure:guns/vim-clojure-static
    coffee-script:kchmck/vim-coffee-script
    coloresque:prurigro/vim-coloresque
    css:JulesWang/css.vim
    csv:chrisbra/csv.vim
    cucumber:tpope/vim-cucumber
    cython:tshirtman/vim-cython
    dockerfile:honza/dockerfile.vim
    elixir:elixir-lang/vim-elixir
    emberscript:heartsentwined/vim-ember-script
    emblem:heartsentwined/vim-emblem
    erlang:oscarh/vimerl
    git:tpope/vim-git
    go:fatih/vim-go:_basic
    haml:tpope/vim-haml
    handlebars:mustache/vim-mustache-handlebars
    haskell:travitch/hasksyn
    haxe:yaymukund/vim-haxe
    html5:othree/html5.vim
    jade:digitaltoad/vim-jade
    jasmine:glanotte/vim-jasmine
    javascript:pangloss/vim-javascript
    jquery:phongnh/vim-jquery
    json:elzr/vim-json
    jst:briancollins/vim-jst
    latex:LaTeX-Box-Team/LaTeX-Box
    less:groenewege/vim-less
    liquid:tpope/vim-liquid
    markdown:plasticboy/vim-markdown:_basic
    nginx:mutewinter/nginx.vim
    nim:zah/nimrod.vim
    ocaml:jrk/vim-ocaml
    octave:vim-scripts/octave.vim--
    opencl:petRUShka/vim-opencl
    perl:vim-perl/vim-perl
    php:StanAngeloff/php.vim
    puppet:rodjek/vim-puppet
    protobuf:uarun/vim-protobuf
    python:mitsuhiko/vim-python-combined
    r-lang:jcfaria/Vim-R-plugin
    rspec:sheerun/rspec.vim
    ruby:vim-ruby/vim-ruby
    rust:wting/rust.vim
    sbt:derekwyatt/vim-sbt
    scala:derekwyatt/vim-scala
    slim:slim-template/vim-slim
    stylus:wavded/vim-stylus
    svg:vim-scripts/svg.vim
    swift:toyamarinyon/vim-swift
    systemd:kurayama/systemd-vim-syntax
    textile:timcharper/textile.vim
    tmux:tejr/vim-tmux
    tomdoc:duwanis/tomdoc.vim
    toml:cespare/vim-toml
    typescript:leafgarland/typescript-vim
    vala:tkztmk/vim-vala
    vbnet:vim-scripts/vbnet.vim
    vm:lepture/vim-velocity
    twig:beyondwords/vim-twig
    xls:vim-scripts/XSLT-syntax
    yard:sheerun/vim-yardoc
'

# backup current setup
backup

# setup fresh temp folder
rm -rf "${tmpfolder:?}"
install -d "$tmpfolder"

# download/setup latest packs
printf 'Downloading packs...'
download "$PACKS"
extract "$PACKS"
concat_ftdetect

printf '\n'
cleanup_and_exit 'Done!' 0
